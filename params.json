{"name":"Tiny","tagline":"抽象服务程序原型, 提供一些基本功能","body":"# Tiny\r\n\r\n![](http://img0.pcgames.com.cn/pcgames/1112/13/2382339_130224659.jpg)\r\n\r\n一个针对Linux的轻量级python服务器架构，提供服务器需要一些基本功能，诸如：热更新、安全退出、日志处理、定时器、运行状态统计和监控等。尽可能的简单，只要最实用的功能，代码总量控制在1k内。和supervise工具协同，效果更佳\r\n\r\n## features\r\n\r\n### basic\r\n\r\n#### 代码结构\r\n\r\n+ my_*.py 是本框架的示例\r\n\r\n+ svr_*.py 是本框架的源代码\r\n\r\n\r\n#### 使用方式\r\n\r\n开发人员通过继承ServerBase得到基本功能，如：\r\n\r\n    from bin.svr_base import ServerBase\r\n    \r\n    class MyServer(ServerBase):\r\n    \r\nServerBase 提供一些抽象函数供开发者实现自定义的处理：\r\n\r\n    # ------------- abstract function --------------\r\n    def on_reload(self):\r\n        pass\r\n\r\n    def on_close(self):\r\n        pass\r\n\r\n    def on_start(self):\r\n        pass\r\n\r\n    def on_except(self, ex, trace_back):\r\n        pass\r\n\r\n    def get_summary(self):\r\n        pass\r\n\r\n    def run(self):\r\n        pass\r\n        \r\n\r\n**备注：可参照 my_server.py** \r\n\r\n### hot-update\r\n\r\n  `./svr.sh reload`\r\n  \r\n### safe-close\r\n\r\n  `./svr.sh close`\r\n  `ctrl+C`\r\n  \r\n### logs\r\n\r\n调用方式：\r\n\r\n    self.info()\r\n    self.warn()\r\n    self.err()\r\n\r\n提供3种log方式，后面会增加email，参见 conf/svr_conf.py\r\n\r\n    CONFIG_DICT = {\r\n        # ....\r\n    \r\n        # log\r\n        'log.console': True,\r\n        'log.console.level': 'INFO',\r\n        'log.console.format': '<%(levelname)s: %(name)s(%(process)d)> [%(filename)s: %(lineno)d] >> %(message)s ',\r\n    \r\n        'log.syslog': True,\r\n        'log.syslog.level': 'WARN',\r\n        'log.syslog.format': '<%(levelname)s: %(name)s(%(process)d)> [%(filename)s: %(lineno)d] >> %(message)s ',\r\n    \r\n        'log.file_log': '/home/ghost/code/log/my_svr.log',\r\n        'log.file_log.level': 'WARN',\r\n        'log.file_log.format': '<%(levelname)s: %(name)s(%(process)d)> [%(filename)s: %(lineno)d] >> %(message)s ',\r\n    }\r\n\r\n\r\n### timer\r\n\r\n通过调用`add_timer` 和 `remove_timer`增加和减少timer，timer之间是串行的，不需要用锁，timer和run之间的锁需要开发者根据需求自己处理。已实现如下timer:\r\n\r\n+ PeriodTimer 周期定时器\r\n+ FixedPeriodTimer 固定时间点的定时器，每小时/每天/每分钟执行\r\n+ 可以继承 _AbstractTimer 实现新的定时器（见 PyServer/bin/svr_timer.py）\r\n\r\n\r\n通过配置调整timer精度：\r\n\r\n        CONFIG_DICT = {\r\n            ....\r\n            \r\n            # timer 设置 (单位:s)\r\n            'svr.timer.min_span': 1,  # timer的精度\r\n            \r\n            ....\r\n        }\r\n\r\n### summary & auto-exit\r\n\r\n+ 超过一定时间没有调用`running_report` 函数，认为程序挂死，自动退出\r\n+ 每隔一定时间自动调用`get_summmary` 函数，将返回结果输出到日志中\r\n\r\n\r\n        CONFIG_DICT = {\r\n            ...\r\n            \r\n            # timer 设置 (单位:s)\r\n            'svr.timer.min_span': 1,  # timer的精度\r\n            'svr.timer.run_status_check_time_span': 60,  # 最大无响应时间，超过这个时间没有相应，自动退出\r\n            'svr.timer.summary_output_time_point': 'M',  # 报告输出类型 D(per day), H(per hour), M(per minute)\r\n        \r\n            ...\r\n        }\r\n\r\n\r\n\r\n\r\n## tasks\r\n\r\n### done\r\n\r\n+ 动态更新代码和配置 `svr.sh reload`\r\n+ 安全退出 `svr.sh close`\r\n+ syslog, consolelog日志处理\r\n+ 多种类型timer\r\n+ 周期性输出统计信息\r\n+ 一定时间不响应，自动退出\r\n+ 错误统一处理\r\n+ 输出日志到特定目录\r\n+ 不同日志不同级别\r\n+ 自动生成重启和关闭脚本 svr.sh\r\n+ \r\n### todo\r\n\r\n+ 写注释，更新readme !!!\r\n+ 响应特定的信号，输出最后一统计信息\r\n+ 响应特定的信号，输出当前配置\r\n+ 邮件通知\r\n+ timeout task\r\n+ retry task\r\n+ 更新需要用锁\r\n+ checkpoint(LATER)\r\n+ master-slave(LATER)\r\n+ 网页监控(LATER)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}